#!/usr/bin/perl
use IPC::Run qw(start pump finish timeout);
use File::Temp qw(tempfile tempdir);

my $RCLONE = File::Which::which('rclone');

if(!$RCLONE){
    #atttempt to download
    my $WGET = File::Which::which('wget');
    my $CURL = File::Which::which('curl');

    my $link = (`uname -a` =~ /Darwin/) ?
	'https://github.com/rclone/rclone/releases/download/v1.51.0/rclone-v1.51.0-osx-amd64.zip' :
	'https://github.com/rclone/rclone/releases/download/v1.51.0/rclone-v1.51.0-linux-amd64.zip';

    my $tdir = tempdir( CLEANUP => 1 );
    (undef, my $tfile) = tempfile(DIR => $tdir, SUFFIX => '.zip');
    if($WGET){
	my $stat = system($WGET, '-q', '-O' => $tfile, $link);
	$stat = system('unzip', '-q', '-d' => $tdir, $tfile) if(!$stat);
	my ($zdir) = $link =~ /([^\/]+)\.zip$/;
	$RCLONE = "$tdir/$zdir/rclone" if(!$stat && -f "$tdir/$zdir/rclone");
    }
    elsif($CURL){
	my $stat = system($CURL, '-s', '-L', '-o' => $tfile, $link);
	$stat = system('unzip', '-q', '-d' => $tdir, $tfile) if(!$stat);
	my ($zdir) = $link =~ /([^\/]+)\.zip$/;
	$RCLONE = "$tdir/$zdir/rclone" if(!$stat && -f "$tdir/$zdir/rclone");
    }

    die ("ERROR: You must install 'rclone' before running this script\n".
	 "https://github.com/rclone/rclone/releases\n") if(!$RCLONE);
}

    
    

#run tty command
my $t_name;
my @cmd = ($RCLONE, 'config');
my ($in, $out, $err);
$h = start(\@cmd, '<', \$in, '>', \$out, '2>', \$err, ($t = timeout(500)));
pump($h) until($out =~ /\>\s*$/i);
$in = "n\n";
pump($h);  #advance terminal

while(1){
    $t->start(120); #reset timer
    pump($h) until($out =~ /\>\s*$/i);
    
    if($out =~ /name\>\s*$/){
	$t_name = int(rand(1000000));
	$in = "$t_name\n";
    }
    elsif($out =~ /Storage\>\s*$/){
	$in = "box\n";
    }
    elsif($out =~ /client_id\>\s*$/){
	$in = "\n";
    }
    elsif($out =~ /client_secret\\s*$>/){
	$in = "\n";
    }
    elsif($out =~ /client_secret\>\s*$/){
	$in = "\n";
    }
    elsif($out =~ /box_config_file\>\s*$/){
	$in = "\n";
    }
    elsif($out =~ /access_token\>\s*$/){
	$in = "\n";
    }
    elsif($out =~ /box_sub_type\>\s*$/){
	$in = "\n";
    }
    elsif($out =~ /y\/n\>\s*$/){
	$in = "\n";
    }
    elsif($out =~ /y\/e\/d\>\s*$/){
	$in = "\n";
    }
    elsif($out =~ /\/q\>\s*$/){
	$in = "q\n";
	last;
    }
    else{
	die "ERROR: Configuration script out of sync with rclone version\n";
    }
    pump($h); #advance terminal
}

#terminate command
$t->start(120); #allow shutdown time
my $stat = finish($h);
$stat = $?;
die "ERROR: exit status $stat\n Failed with --> $err" if($stat);

#extract token
my $config = "$ENV{HOME}/.config/rclone/rclone.conf";
die "ERROR: Rclone configuration file does not exist\n" if(! -f $config);

print STDERR "#Copy the following to ~/.config/rclone/rclone.conf on the system where you want to use UBox\n\n";

my $keep = '';
open(my $IN, '<', $config);
while(my $line = <$IN>){
    if($line =~ /^\[$t_name\]/){
	print "[ubox]\n";
	while($line = <$IN>){
	    last if($line =~ /^\[/);
	    print $line;
	}
    }
    $keep .= $line if(defined($line));
}
close($IN);

#clean up config file
open(my $OUT, '>', $config);
print $OUT $keep;
close($OUT);

exit(0);

#internalize File::Which from CPAN
BEGIN {
    package File::Which;
    
    use 5.004;
    use strict;
    use Exporter   ();
    use File::Spec ();
    
    use vars qw{$VERSION @ISA @EXPORT @EXPORT_OK};
    BEGIN {
        $VERSION   = '1.09';
        @ISA       = 'Exporter';
        @EXPORT    = 'which';
        @EXPORT_OK = 'where';
    }
    
    use constant IS_VMS => ($^O eq 'VMS');
    use constant IS_MAC => ($^O eq 'MacOS');
    use constant IS_DOS => ($^O eq 'MSWin32' or $^O eq 'dos' or $^O eq 'os2');
    
    # For Win32 systems, stores the extensions used for
    # executable files
    # For others, the empty string is used
    # because 'perl' . '' eq 'perl' => easier
    my @PATHEXT = ('');
    if ( IS_DOS ) {
        # WinNT. PATHEXT might be set on Cygwin, but not used.
        if ( $ENV{PATHEXT} ) {
            push @PATHEXT, split ';', $ENV{PATHEXT};
        } else {
            # Win9X or other: doesn't have PATHEXT, so needs hardcoded.
            push @PATHEXT, qw{.com .exe .bat};
        }
    } elsif ( IS_VMS ) {
        push @PATHEXT, qw{.exe .com};
    }
    
    sub which {
        my ($exec) = @_;
	
        return undef unless $exec;
	
        my $all = wantarray;
        my @results = ();
	
        # check for aliases first
        if ( IS_VMS ) {
            my $symbol = `SHOW SYMBOL $exec`;
            chomp($symbol);
            unless ( $? ) {
                return $symbol unless $all;
                push @results, $symbol;
            }
        }
        if ( IS_MAC ) {
            my @aliases = split /\,/, $ENV{Aliases};
            foreach my $alias ( @aliases ) {
                # This has not been tested!!
                # PPT which says MPW-Perl cannot resolve `Alias $alias`,
                # let's just hope it's fixed
                if ( lc($alias) eq lc($exec) ) {
                    chomp(my $file = `Alias $alias`);
                    last unless $file;  # if it failed, just go on the normal way
                    return $file unless $all;
                    push @results, $file;
                    # we can stop this loop as if it finds more aliases matching,
                    # it'll just be the same result anyway
                    last;
                }
            }
        }
	
        my @path = File::Spec->path;
        if ( IS_DOS or IS_VMS or IS_MAC ) {
            unshift @path, File::Spec->curdir;
        }
	
        foreach my $base ( map { File::Spec->catfile($_, $exec) } @path ) {
            for my $ext ( @PATHEXT ) {
		my $file = $base.$ext;
		
                # We don't want dirs (as they are -x)
                next if -d $file;

		if (
                    # Executable, normal case
		    -x _
                    or (
			# MacOS doesn't mark as executable so we check -e
                        IS_MAC
                        ||
                        (
                         IS_DOS
                         and
                         grep {
                             $file =~ /$_\z/i
                         } @PATHEXT[1..$#PATHEXT]
                        )
                        # DOSish systems don't pass -x on
                        # non-exe/bat/com files. so we check -e.
                        # However, we don't want to pass -e on files
                        # that aren't in PATHEXT, like README.
                        and -e _
                    )
		    ) {
                    return $file unless $all;
                    push @results, $file;
		}
            }
        }
	
        if ( $all ) {
            return @results;
        } else {
            return undef;
        }
    }

    sub where {
        # force wantarray
        my @res = which($_[0]);
        return @res;
    }
    
    1;
}
